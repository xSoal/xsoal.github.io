{"version":3,"sources":["components/Calendar/index.js","components/Product/index.js","components/AddProduct/index.js","components/DeleteProduct/index.js","components/Save/index.js","components/CurrentDay/index.js","js/functions/getFullDateFromDateObj.js","js/functions/getDataForOneDayFromAll.js","components/App/App.js","js/functions/getIdOfDay.js","js/functions/canselAllProductsInDayDelete.js","js/functions/isAllProductInDayAreDeleted.js","serviceWorker.js","index.js"],"names":["Calendar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","date","setState","props","onDayChoiceFromCalendar","state","Date","react_default","a","createElement","entry_default","value","Component","Product","onChangeNameHandler","event","target","editedProduct","productObj","product_name","onRenewProduct","onChangeCountHandler","product_count","onChangeProductStatusHandler","status","checked","product_status","onKeyDowHandler","keyCode","onAddProduct","inputNameRef","React","createRef","isEnableFocus","current","focus","productStatus","console","log","Fragment","type","className","onKeyDown","ref","min","AddProduct","onAddProductHandler","onClick","DeleteProduct","onDeleteProduct","productId","Save","onClickHandler","isLastSave","onSave","CurrentDay","newProductObj","nextProps","self","isEnableFocusInInput","template","currentDayData","map","count","length","wasDeleted","key","components_Product","product_id","DeleteProduct_DeleteProduct","push","AddProduct_AddProduct","renderProducts","Save_Save","getFullDateFromDateObj","dateObj","month","getMonth","getFullYear","getDate","getDataForOneDayFromAll","allData","currentDay","dayData","forEach","dayObj","index","indexInAllDataArray","day","mode","conf","dev","baseUrl","build","window","location","host","App","isLoad","data","fns","chosenDate","renewData","newData","arguments","undefined","renewProductObj","renewProductId","isEdited","dataLength","lastProductId","day_id","curentDay","curentDayId","item","concat","wasDeletedAllDay","productObjIdToDelete","every","FormData","append","JSON","stringify","fetch","method","body","then","res","text","parse","_this2","xhr","XMLHttpRequest","open","send","onreadystatechange","readyState","responseText","localData","_this3","setInterval","components_Calendar","CurrentDay_CurrentDay","Boolean","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87813b1c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport ReactCalendar from 'react-calendar';\r\nimport './style.scss';\r\n\r\nclass Calendar extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            date: new Date(),\r\n        };\r\n    }\r\n\r\n    onChange = date => {\r\n        this.setState({ date });\r\n        this.props.onDayChoiceFromCalendar( date );\r\n    };\r\n\r\n    componentDidMount(){\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ReactCalendar\r\n                    onChange={this.onChange}\r\n                    value={this.state.date}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Calendar;","import React, {Component} from 'react';\r\nimport './style.scss';\r\n\r\nclass Product extends Component {\r\n    constructor(){\r\n        super();\r\n        this.inputNameRef = React.createRef();\r\n    }\r\n\r\n    onChangeNameHandler = event => {\r\n        let value = event.target.value;\r\n        let editedProduct = this.props.productObj;\r\n        editedProduct.product_name = value;\r\n        \r\n        this.props.onRenewProduct(editedProduct);\r\n    }\r\n\r\n    onChangeCountHandler = event => {\r\n        let value = event.target.value;\r\n        let editedProduct = this.props.productObj;\r\n        editedProduct.product_count = value;\r\n\r\n        this.props.onRenewProduct(editedProduct);\r\n    }\r\n\r\n    onChangeProductStatusHandler = event => {\r\n        \r\n        let status = event.target.checked ? '1' : '0';\r\n        \r\n        let editedProduct = this.props.productObj;\r\n        editedProduct.product_status = status;\r\n\r\n        this.props.onRenewProduct(editedProduct);\r\n    }\r\n\r\n    onKeyDowHandler = event => {\r\n        // enter button code == 13;\r\n        if(event.keyCode === 13 && event.target.value !== \"\"){\r\n            this.props.onAddProduct();\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if( this.props.isEnableFocus )this.inputNameRef.current.focus();\r\n    }\r\n\r\n    render() {\r\n        let {productObj}  = this.props;\r\n        let productStatus = productObj.product_status === \"1\" ? true : false;\r\n        console.log(productStatus, 'stats')\r\n        return (\r\n            <>\r\n                <input type=\"text\" className=\"product__name\"\r\n                    value  = { productObj.product_name }\r\n                    onChange      = { this.onChangeNameHandler }\r\n                    onKeyDown     = { this.onKeyDowHandler }\r\n                    ref           = { this.inputNameRef }\r\n                    />\r\n                <input type=\"number\" min=\"1\" className=\"product_count\"\r\n                    value = { productObj.product_count ? productObj.product_count : \"1\" }\r\n                    onChange     = { this.onChangeCountHandler }\r\n                    onKeyDown    = { this.onKeyDowHandler }\r\n                    />\r\n                <input type=\"checkbox\" className=\"product_status\"\r\n                    // defaultChecked = { productStatus }\r\n                    checked = { productStatus }\r\n                    onChange       = { this.onChangeProductStatusHandler }\r\n                    />   \r\n            </>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Product;","import React, {Component} from 'react';\r\nimport './styles.scss';\r\n\r\nexport default class AddProduct extends Component {\r\n    \r\n    onAddProductHandler = () => {\r\n        this.props.onAddProduct();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div>\r\n                <div\r\n                    onClick   = { this.onAddProductHandler }\r\n                    className = \"product__add button\">\r\n                    +\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './style.scss';\r\n\r\nexport default class DeleteProduct extends Component {\r\n    \r\n    onDeleteProduct = () => {\r\n        this.props.onDeleteProduct(\r\n            \r\n            this.props.productId,\r\n        );\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <>\r\n                <span\r\n                onClick   = { this.onDeleteProduct } \r\n                className =\"product__deleteButton button\">x</span>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, {Component} from 'react';\r\n\r\nimport './style.scss';\r\n\r\nexport default class Save extends Component {\r\n    \r\n    onClickHandler = () => {\r\n        if( !this.props.isLastSave ) {\r\n            this.props.onSave();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <button\r\n                    onClick   = { this.onClickHandler } \r\n                    className = { (this.props.isLastSave ? ' isLastSave ' : '') + \"currentDay__save\"}>\r\n                    Save\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n};\r\n","import React, {Component} from 'react';\r\nimport Product from '../Product';\r\nimport AddProduct from '../AddProduct';\r\nimport DeleteProduct from '../DeleteProduct';\r\nimport Save from '../Save';\r\nimport './style.scss';\r\n\r\nexport default class CurrentDay extends Component {\r\n    // constructor(){\r\n    //     super();\r\n    // }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n    }\r\n\r\n    onRenewProduct = newProductObj => {\r\n        this.props.onRenewProduct( newProductObj );\r\n    }\r\n    onAddProduct = () => {\r\n        this.props.onAddProduct();\r\n    }\r\n    onDeleteProduct = (productId) => {\r\n        this.props.onDeleteProduct(\r\n            productId,\r\n        );\r\n    }\r\n\r\n    renderProducts(){\r\n        // day: \"2018-11-15\"\r\n        // day_id: \"1\"\r\n        // product_count: \"1\"\r\n        // product_id: \"3\"\r\n        // product_name: \"Eshe Pivo\"\r\n\r\n        //this.props.currentDayData\r\n\r\n        let self = this;\r\n        let isEnableFocusInInput = false;\r\n        let template = this.props.currentDayData.map(function (productObj,count) {\r\n\r\n            if(count === self.props.currentDayData.length-1){\r\n                // focus need activate if it's new empty product to input value\r\n                isEnableFocusInInput = productObj.product_name ? false : true;\r\n            }\r\n            if( productObj.wasDeleted ) return \"\";\r\n            return (\r\n                <div key={count*100} className=\"currentProduct\">\r\n                    <Product\r\n                        key            = { productObj.product_id }\r\n                        productObj     = { productObj }\r\n                        onRenewProduct = { self.onRenewProduct }\r\n                        isEnableFocus  = { isEnableFocusInInput }\r\n                        onAddProduct   = { self.onAddProduct }\r\n                        />\r\n                    <DeleteProduct\r\n                        onDeleteProduct = { self.onDeleteProduct}\r\n                        productId       = { productObj.product_id }\r\n                        />\r\n                </div>\r\n            );\r\n        });\r\n        template.push(\r\n            <AddProduct key=\"1000\" onAddProduct = { this.onAddProduct }/>\r\n        );\r\n        return template;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"currentDay\">\r\n                {this.renderProducts()}\r\n                <Save\r\n                    onSave     = { this.props.onSave }\r\n                    isLastSave = { this.props.isLastSave }\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","\r\n\r\nexport default function getFullDateFromDateObj (dateObj) {\r\n    let month = dateObj.getMonth();\r\n    return dateObj.getFullYear() + \"-\" + (++month) + \"-\" + dateObj.getDate();\r\n}","\r\n\r\n\r\nexport default function getDataForOneDayFromAll(allData, currentDay) {\r\n    // CurrentDay = \"2018-11-15\"\r\n    let dayData = [];\r\n\r\n    allData.forEach(function(dayObj, index){\r\n        dayObj.indexInAllDataArray = index;\r\n        if( dayObj.day === currentDay ) dayData.push(dayObj);\r\n    });\r\n\r\n    return dayData;\r\n\r\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport Calendar from '../Calendar';\nimport CurrentDay from '../CurrentDay';\n\nimport * as fns from '../../js/functions/index.js';\n\n// 'build' || 'dev' || 'portfolio'\nconst mode = 'portfolio';\n\nconst conf = {\n    dev: {\n        baseUrl : \"http://api.tobuy.io/\",\n    },\n    build: {\n        baseUrl : \"http://\"+window.location.host + \"/api/\",\n    }\n    \n};\n\n\nclass App extends Component {\n\n    state = {\n        isLoad: true,\n        isLastSave: true,\n        data: [],\n        currentDay: fns.getFullDateFromDateObj(new Date()),\n        currentDayData: false,\n       \n    }\n    onDayChoiceFromCalendar = date => {\n        let chosenDate     = fns.getFullDateFromDateObj(date);\n        let currentDayData = fns.getDataForOneDayFromAll(this.state.data, chosenDate);\n        this.setState({\n            currentDay: chosenDate,\n            currentDayData: currentDayData,\n        });\n    }\n\n    renewData = (newData, isLastSave = false, isLoad = false) => {\n\n        let currentDayData = fns.getDataForOneDayFromAll(newData, this.state.currentDay);\n        this.setState({\n            data: newData,\n            currentDayData: currentDayData,\n            isLastSave: isLastSave,\n            isLoad: isLoad,\n        });\n    }\n\n    onRenewProduct = renewProductObj => {\n        let newData = this.state.data;\n        let renewProductId = renewProductObj.indexInAllDataArray;\n        renewProductObj.isEdited = true;\n        newData[renewProductId]  = renewProductObj;\n\n        this.renewData(newData);\n    }\n\n    onAddProduct = () => {\n        let dataLength = this.state.data.length;\n        let lastProductId = this.state.data[dataLength-1].product_id;\n\n        let newData = this.state.data;\n        newData.push({\n            day: this.state.currentDay,\n            day_id: fns.getIdOfDay(this.state.currentDay, this.state.data),\n            product_id: `${++lastProductId}`,\n            product_count: 1,\n        });\n        \n        newData = fns.canselAllProductsInDayDelete(newData);\n        this.renewData(newData);\n\n    }\n\n    onDeleteProduct = (product_id) => {\n        let productObjIdToDelete = null;\n\n        this.state.data.forEach((item,count)=>{\n            if(item.product_id === product_id){\n                productObjIdToDelete = count;\n            }\n        });\n\n        var newData = this.state.data;\n        newData[productObjIdToDelete].wasDeleted = true;\n        \n        if(fns.isAllProductInDayAreDeleted(newData, this.state.currentDay)){\n            newData[productObjIdToDelete].wasDeletedAllDay = true;\n        };\n        this.renewData(newData);\n\n        \n        // newData.splice(productObjIdToDelete,2);\n\n    }\n\n    onSave = () => {\n        if(mode !== 'portfolio'){\n            var data = new FormData();\n            data.append( \"save\", JSON.stringify( this.state.data ) );\n            \n            fetch( conf[mode].baseUrl,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => {\n                return res.text();\n            })\n            .then(data => {\n                console.log(JSON.parse(data), 'NEW DATA')\n                this.renewData(JSON.parse(data), true);\n            });\n        } else {\n            this.renewData(this.state.data, true);\n        }\n\n    }\n\n\n    componentWillMount() {\n        if(mode !== 'portfolio'){\n            const xhr = new XMLHttpRequest();\n    \n            xhr.open('GET', conf[mode].baseUrl+'?getAllDays=&', true); // замените адрес\n            xhr.send();\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState !== 4) {\n                    return false;\n                }\n                if (xhr.status !== 200) {\n                } else {\n                    let currentDayData = fns.getDataForOneDayFromAll(\n                        JSON.parse(xhr.responseText), this.state.currentDay);\n                    this.setState({\n                        data: JSON.parse(xhr.responseText),\n                        currentDayData: currentDayData,\n                        isLoad: false,\n                    });\n                }\n            }\n        } else {\n            let strLocalData = `[{\"day_id\":\"94\",\"day\":\"2012-01-01\",\"product_name\":\"test\",\"product_count\":\"1\",\"product_id\":\"127\",\"product_status\":\"0\"},{\"day_id\":\"95\",\"day\":\"2018-11-20\",\"product_name\":\"test\",\"product_count\":\"1\",\"product_id\":\"128\",\"product_status\":\"0\"}]`;\n            let localData = JSON.parse(strLocalData);\n            let currentDayData = fns.getDataForOneDayFromAll( localData, this.state.currentDay );\n            this.setState({\n                data: localData,\n                currentDayData: currentDayData,\n                isLoad: false,\n            });\n        }\n\n    };\n\n    componentDidMount(){\n        if(mode !== 'portfolio'){\n            setInterval(()=>{\n                if(this.state.isLastSave){\n                    this.setState({\n                        isLoad: true,\n                    });\n                    const xhr = new XMLHttpRequest();\n                    xhr.open('GET', conf[mode].baseUrl+'?getAllDays=&', true); // замените адрес\n                    xhr.send();\n                    xhr.onreadystatechange = () => {\n                        if (xhr.readyState !== 4) {\n                            return false;\n                        }\n                        if (xhr.status !== 200) {\n                        } else {\n                            let newData = JSON.parse(xhr.responseText);\n      \n                            if( JSON.stringify(fns.getDataForOneDayFromAll(newData, this.state.currentDay))\n                            !== JSON.stringify(fns.getDataForOneDayFromAll(this.state.data, this.state.currentDay)) ){\n                                this.renewData(newData, true, false);\n                            }\n                        }\n                    }   \n                }\n            },2500);\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"wrapper\">\n                { mode === 'portfolio'\n                    ? <div className=\"alertMessage\">\n                        This mode 'for test and read only' , becouse this list is must work on local server with local dataBase at my home.\n                        <hr/>\n                        Also i don't need ui in this =) It's my easy react spa work's fine like as my order list, that works from many devices at one moment of time and push products for home without reload =) \n                      </div>\n                    : \"\" }\n                <h1 className=\"header__h1 h1\">To buy list</h1>\n                { this.state.isLoad ? 'Loading...' : 'Load' }\n                <div className=\"calendar\">\n                    <Calendar onDayChoiceFromCalendar={this.onDayChoiceFromCalendar}/>\n                </div>\n                { this.state.currentDayData\n                    ?<CurrentDay\n                        currentDayData  = { this.state.currentDayData }\n                        onRenewProduct  = { this.onRenewProduct }\n                        onAddProduct    = { this.onAddProduct }\n                        onDeleteProduct = { this.onDeleteProduct }\n                        onSave          = { this.onSave }\n                        isLastSave      = { this.state.isLastSave }\n                        />\n                    :\"\" }\n                \n            </div>\n        );\n    }\n}\n\nexport default App;\n","\r\n\r\n\r\n// it's will find id of day in array from database\r\n// and will make it like false, if need to create new day in data base  \r\n// curentDay '2018-11-17'\r\nexport default function getIdOfDay( curentDay, data ){\r\n    let curentDayId = false;\r\n\r\n    data.forEach((item)=>{\r\n        if(item.day === curentDay){\r\n            curentDayId = item.day_id;\r\n        }\r\n    });\r\n\r\n    return curentDayId;\r\n}","\r\n\r\nexport default function canselAllProductsInDayDelete(data){\r\n    let newData = data.map((item)=>{\r\n            item.wasDeletedAllDay = false;\r\n            return item;\r\n        });\r\n\r\n    return newData;\r\n}","\r\n\r\nexport default function isAllProductInDayAreDeleted(data, curentDay){\r\n    return data.every((item)=>{    \r\n        if(item.day === curentDay){\r\n            if(item.wasDeleted){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    });\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}